#!/usr/bin/env python3

import argparse
import re
from typing import List, Mapping, Tuple

import screed


def parse_args():
    """ Parse command-line arguments """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "assembly", type=screed.open, help="assembly to analyze, in fasta format"
    )
    return parser.parse_args()


def calculate_stats(assembly: screed.openscreed.Open) -> Mapping[str, int]:
    """
    Calculate statistics about an assembly, including total size,
    contig/scaffold L50/N50, and N count, returning all of these as
    a dictionary.

    Args:
        assembly: an assembly fasta opened by screed

    Returns:
        a dict of stats with the following keys (all self-explanatory):
            - "assembly_size"
            - "contig_n50"
            - "scaffold_n50"
            - "contig_l50"
            - "scaffold_l50"
            - "n_count"
    """
    scaffold_lengths = []
    contig_lengths = []
    for scaffold in assembly:
        scaffold_lengths.append(len(scaffold.sequence))
        for contig in re.split("N+", scaffold.sequence):
            contig_lengths.append(len(contig))

    contig_n50, contig_l50 = calculate_n50_l50(contig_lengths)
    scaffold_n50, scaffold_l50 = calculate_n50_l50(scaffold_lengths)

    return {
        "assembly_size": sum(scaffold_lengths),
        "contig_n50": contig_n50,
        "contig_l50": contig_l50,
        "scaffold_n50": scaffold_n50,
        "scaffold_l50": scaffold_l50,
        "n_count": sum(scaffold_lengths) - sum(contig_lengths),
    }


def calculate_n50_l50(sequence_lengths: List[int]) -> Tuple[int, int]:
    """
    Calculate the n50 and l50 of a list of sequence lengths.

    Arguments:
        sequence_lengths: a list of sequence lengths (int)

    Returns:
        n50 (int): the N50 of the given set of sequence lengths
        l50 (int): the L50 of the given set of sequence lengths
    """
    sequence_lengths.sort(reverse=True)
    total_length = sum(sequence_lengths)
    cumulative_sum = 0
    for i, length in enumerate(sequence_lengths):
        cumulative_sum += length
        if cumulative_sum >= total_length / 2:
            return length, i


def main():
    args = parse_args()
    stats = calculate_stats(args.assembly)
    print(stats)


if __name__ == "__main__":
    main()
